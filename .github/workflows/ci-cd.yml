name: Fluxo padrão
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # Configurar a versão automática
      - name: Set build version
        id: version
        run: |
          # Definir a versão base
          BASE_VERSION="1.0.0"

          # Obter o número da execução
          BUILD_NUMBER=${{ github.run_number }}

          # Gerar a nova versão
          NEW_VERSION="$BASE_VERSION-$BUILD_NUMBER"

          # Exportar a versão como variável de ambiente
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      # Instalar o .NET SDK para os testes
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0' # Versão do .NET SDK

      # Restaurar dependências do .NET
      - name: Restore dependencies
        run: dotnet restore

      # Remover duplicatas dos repositórios Microsoft
      - name: Remove duplicate repositories
        run: |
          echo "Removing duplicate APT repository entries..."
          # Remover duplicatas do repositório mssql
          sudo sed -i '/microsoft-prod.list/d' /etc/apt/sources.list.d/*
          sudo sed -i '/mssql-release.list/d' /etc/apt/sources.list.d/*
          # Re-adicionar o repositório correto
          echo "deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/24.04/prod noble main" | sudo tee /etc/apt/sources.list.d/microsoft-prod.list
          echo "deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/24.04/mssql-server-2019 stable main" | sudo tee /etc/apt/sources.list.d/mssql-release.list

      # Testar a conexão com o banco de dados
      - name: Test database connection
        run: |
          echo "Testing database connection..."
          # Teste básico de conexão com o banco de dados usando sqlcmd
          /opt/mssql-tools/bin/sqlcmd -S ${{ secrets.DB_SERVER }} -U ${{ secrets.DB_USER }} -P ${{ secrets.DB_PASSWORD }} -Q "SELECT 1"
        continue-on-error: false

      # Login no Docker
      - name: Docker Login 
        uses: docker/login-action@v3.0.0
        with:
          username: 'zennbyte'
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Construir e enviar a imagem Docker
      - name: Build and Push Docker images
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          tags: |
            zennbyte/api-contactmanager:${{ env.NEW_VERSION }}
          push: true
