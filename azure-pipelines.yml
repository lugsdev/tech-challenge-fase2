trigger:
- '*'

resources:
- repo: self

variables:
  buildConfiguration: 'Release'
  realeaseBranchName: 'release'
  #wwwrootDir: 'Tech Challenge - Fase 2'

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '85814df3-db4a-4935-bd98-fbe59a8b6363'
  imageRepository: 'apicontactmanager'
  containerRegistry: 'testeacrfiap.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/ContactManagement.Api/Dockerfile'
  tag: '$(Build.BuildId)'

pool: self-hosted

stages:
  - stage: 'Build'
    displayName: 'Build'
    jobs:
    - job: 'Build'
      displayName: 'Build Job'

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET SDK 8'
        inputs:
          packageType: 'sdk'
          version: '8.x'

      - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(build.BuildNumber)" > buildinfo.txt'
        #workingDirectory: '$(wwwrootDir)'

      - task: DotNetCoreCLI@2
        displayName: 'Restore project'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build project'
        inputs:
          command: 'build'
          arguments: '--no-restore --configuration $(buildConfiguration)'
          projects: '**/*.csproj'
          
      - task: DotNetCoreCLI@2
        displayName: 'Publish project'
        inputs:
          command: 'publish'
          projects: '**/*.csproj'
          publishWebProjects: false
          arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtificatStagingDirectory/$(buildConfiguration))'
          zipAfterPublish: true

      - publish: '$(Build.ArtificatStagingDirectory'
        artifact: drop
      
      - task: Docker@2
        displayName: Build and push an image to container registry (Dockerfile)
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)

  - stage: 'Development'
    displayName: 'Deploy Development enviroment'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        environment: development
        #variables:
        #  - group: ''
        strategy:
          runOnce:
            deploy:
             steps:
               - download: current
                 artifact: drop

              #  - task: AzureCLI@2
              #    inputs:
              #     azureSubscription: 'Azure subscription 1(fbc3ecca-50c5-4e82-a364-1a17cd39e809)'
              #     scriptType: 'ps'
              #     scriptLocation: 'inlineScript'
              #     inlineScript: 'az container create -g $(resourceGroup) --name $(appName) --image $(acrLoginServer)/$(acrName):$(Build.BuildId) --cpu 1 --memory 1 --registry-login-server $(acrLoginServer) --registry-username $(acrName) --registry-password $(acrPassword) --ports 80'

              #  - script: |
              #      echo O deploy em Development foi realizado com sucesso.
              #    displayName: 'Deploy into Development'
                
  - stage: 'Staging'
    displayName: 'Deploy Staging enviroment'
    dependsOn: Development
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/stage')
    jobs:
      - deployment: Deploy
        environment: staging
        #variables:
        #  - group: ''
        strategy:
          runOnce:
            deploy:
             steps:
               - download: current
                 artifact: drop
               - script: |
                   echo O deploy em Staging foi realizado com sucesso.
                 displayName: 'Deploy into Staging'
                 
  - stage: 'Production'
    displayName: 'Deploy Production enviroment'
    dependsOn: Staging
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - deployment: Deploy
        environment: production
        #variables:
        #  - group: ''
        strategy:
          runOnce:
            deploy:
             steps:
               - download: current
                 artifact: drop
               - script: |
                   echo O deploy em Production foi realizado com sucesso.
                 displayName: 'Deploy into Production'